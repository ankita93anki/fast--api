8- path parameters -
from fastapi import FastAPI

app = FastAPI()

@app.get('/')
def index():
    return 'Hello world!'

#id here is a path parameter
@app.get('/property/{id}')
def property(id:int):
    return {f'This is a property range for property {id}'}

@app.get('/profile/{username}')
def profile(username: str):
    return {f'This is profile page for user : {username}'}

@app.get('/movies')
def movies():
    return {'movie list': {'Movie 1','Movie 2'}}



10 - ordering of routes-
from fastapi import FastAPI

app = FastAPI()

@app.get('/user/admin')
def admin():
    return {'This is admin page'}

#path parameter
@app.get('/user/{username}')
def profile(username):
    return {f'This is a profile page for {username}'}

#query parameter
@app.get('/products')
def products(id):
    return {f'Product with an id: {id}'}

12-# by default query parameter
@app.get('/products')
def products(id=1,price=2):
    return {f'Product with an id: {id} and price = {price}'}


13-#use path & query parametr
@app.get('/profile/{userid}/comments')
def profile(userid:int,commentId:int):
    return {f'Profile page for user with userid {userid} and comment for comment id {commentId}'}


14.required query parameter
#query parameter
@app.get('/products')
def products(id:int=None,price:int=None):
    return {f'Product with an id: {id} and price = {price}'}


17.Pydantic models with request body
from fastapi import FastAPI
from pydantic import BaseModel

#pydantic is a libarary which allows us to create a very own data using model

class Profile(BaseModel):
    name: str
    email: str
    age: int

app = FastAPI()

@app.post('/adduser')
def addUser(profile:Profile):
    return profile


18- using model inside a function
from fastapi import FastAPI
from pydantic import BaseModel

class Profile(BaseModel):
    name: str
    email: str
    age: int

class Product(BaseModel):
    name:str
    price:int
    discount:int 
    discounted_price:float

app = FastAPI()

@app.post('/addproduct')
def addProduct(product:Product):
    product.discounted_price = product.price - (product.price * product.discount)/100
    return product

@app.post('/adduser')
def addUser(profile:Profile):
    return profile

19-Passing path & query parameter
class Product(BaseModel):
    name:str
    price:int
    discount:int 
    discounted_price:float

app = FastAPI()

@app.post('/addproduct/{product_id}')
def addProduct(product:Product, product_id: int, category:str):
    product.discounted_price = product.price - (product.price * product.discount)/100
    return {"product_id":product_id,"product":product, "category":category}


20.Defining fields for metadata
from pydantic import BaseModel, Field

class Profile(BaseModel):
    name: str
    email: str
    age: int

class Product(BaseModel):
    name:str
    price:int = Field(title="Price of the item", description="This would be the price of the item being added", gt=0)
    discount:int 
    discounted_price:float
    

22 Nesting python data types in model - 
from fastapi import FastAPI
from pydantic import BaseModel, Field, HttpUrl
from typing import Set

class Profile(BaseModel):
    name: str
    email: str
    age: int

class Image(BaseModel):
    url:HttpUrl
    name:str

class Product(BaseModel):
    name:str
    price:int = Field(title="Price of the item", description="This would be the price of the item being added", gt=0)
    discount:int 
    discounted_price:float
    tags: Set[str] = []
    image:Image

class User(BaseModel):
    name:str
    email:str

app = FastAPI()

@app.post('/purchase')
def purchase(user:User, product:Product):
    return {'user':user,"product":product}

@app.post('/addproduct/{product_id}')
def addProduct(product:Product, product_id: int, category:str):
    product.discounted_price = product.price - (product.price * product.discount)/100
    return {"product_id":product_id,"product":product, "category":category}

@app.post('/adduser')
def addUser(profile:Profile):
    return profile


23-
